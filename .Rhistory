knitr::opts_chunk$set(warning = FALSE, message = FALSE)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- createDataPartition(df$satisfaction_re, p = 0.8, list = FALSE)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- createDataPartition(df$target, p = 0.8, list = FALSE)
path = 'heart.csv'
df <- read.csv(path, row.names=NULL)
df$exng <- factor(df$exng)
df$cp <- factor(df$cp)
df$fbs <- factor(df$fbs)
df$restecg <- factor(df$restecg)
df$output <- factor(df$output)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- createDataPartition(df$target, p = 0.8, list = FALSE)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- caret::createDataPartition(df$target, p = 0.8, list = FALSE)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- caret::createDataPartition(df$target, p = 0.7, list = FALSE)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- createDataPartition(df$target, p = 0.8, list = FALSE)
View(df)
View(df)
if(!require("caret")) install.packages("caret"); library(caret)
# Crear partición de los datos
partition <- createDataPartition(df$output, p = 0.8, list = FALSE)
# Generar conjunto de entrenamiento
training_data <- df[sample(partition), ]
# Generar conjunto de prueba
testing_data <- df[-sample(partition), ]
# Seleccionar variables explicativas
explanatory_vars <- names(training_data)[!names(training_data) %in% c("")]
# Estimar modelo de regresión logística
model <- glm(satisfaction_re ~ ., data = training_data[, explanatory_vars], family = binomial)
# Seleccionar variables explicativas
explanatory_vars <- names(training_data)[!names(training_data) %in% c("")]
# Estimar modelo de regresión logística
model <- glm(output ~ ., data = training_data[, explanatory_vars], family = binomial)
summary(model)
# Obtener predicciones del modelo en el conjunto de prueba
predictions <- predict(model, newdata = testing_data, type = "response")
# Crear nueva variable con predicciones del modelo
testing_data$prediction <- ifelse(predictions >= 0.5, 1, 0)
# Comparar predicciones del modelo con variable dependiente del conjunto de prueba
confusion_matrix <- table(testing_data$prediction, testing_data$satisfaction_re)
# Obtener predicciones del modelo en el conjunto de prueba
predictions <- predict(model, newdata = testing_data, type = "response")
# Crear nueva variable con predicciones del modelo
testing_data$prediction <- ifelse(predictions >= 0.5, 1, 0)
# Comparar predicciones del modelo con variable dependiente del conjunto de prueba
confusion_matrix <- table(testing_data$prediction, testing_data$output)
confusion_matrix
# Calcular tasa de aciertos del modelo
accuracy <- mean(testing_data$prediction == testing_data$satisfaction_re)
# Imprimir tasa de aciertos del modelo
print(accuracy)
sensitivity(confusion_matrix)
specificity(confusion_matrix)
# Obtener predicciones del modelo en el conjunto de prueba
predictions <- predict(model, newdata = testing_data, type = "response")
# Crear nueva variable con predicciones del modelo
testing_data$prediction <- ifelse(predictions >= 0.5, 1, 0)
# Comparar predicciones del modelo con variable dependiente del conjunto de prueba
confusion_matrix <- table(testing_data$prediction, testing_data$output)
confusion_matrix
# Calcular tasa de aciertos del modelo
accuracy <- mean(testing_data$prediction == testing_data$output)
# Imprimir tasa de aciertos del modelo
print(accuracy)
sensitivity(confusion_matrix)
specificity(confusion_matrix)
# Seleccionar variables explicativas
explanatory_vars <- names(df)[!names(df) %in% c("output")]
# Estimar modelo de regresión logística
client <- df[3, explanatory_vars]
client
# Hacer la predicción
prediction_client <- predict(model, client, interval = "confidence", type = "response")
# Mostrar el resultado de la predicción
prediction_client
# Seleccionar variables explicativas
explanatory_vars <- names(df)[!names(df) %in% c("output")]
# Estimar modelo de regresión logística
client <- df[183, explanatory_vars]
client
# Hacer la predicción
prediction_client <- predict(model, client, interval = "confidence", type = "response")
# Mostrar el resultado de la predicción
prediction_client
# Seleccionar variables explicativas
explanatory_vars <- names(df)[!names(df) %in% c("output")]
# Estimar modelo de regresión logística
client <- df[176, explanatory_vars]
client
# Hacer la predicción
prediction_client <- predict(model, client, interval = "confidence", type = "response")
# Mostrar el resultado de la predicción
prediction_client
# Seleccionar variables explicativas
explanatory_vars <- names(df)[!names(df) %in% c("output")]
# Estimar modelo de regresión logística
client <- df[186, explanatory_vars]
client
# Hacer la predicción
prediction_client <- predict(model, client, interval = "confidence", type = "response")
# Mostrar el resultado de la predicción
prediction_client
# Seleccionar variables explicativas
explanatory_vars <- names(df)[!names(df) %in% c("output")]
# Estimar modelo de regresión logística
client <- df[183, explanatory_vars]
client
# Hacer la predicción
prediction_client <- predict(model, client, interval = "confidence", type = "response")
# Mostrar el resultado de la predicción
prediction_client
